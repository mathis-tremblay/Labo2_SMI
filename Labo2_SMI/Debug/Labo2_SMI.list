
Labo2_SMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008dc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a88  08000a88  00010a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000a9c  08000a9c  00010a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010aa0  2**0
                  CONTENTS
  7 .bss          00000138  20000000  20000000  00020000  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20000138  20000138  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002408  00000000  00000000  00010ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000921  00000000  00000000  00012ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001d0  00000000  00000000  00013800  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  000139d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000f19  00000000  00000000  00013b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000b71  00000000  00000000  00014a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000155b2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000004f8  00000000  00000000  00015630  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00015b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000a70 	.word	0x08000a70

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000a70 	.word	0x08000a70

080001ec <GPIO_Config>:


// mode : 0 = input, 1 = output, 2 = alternate, 3 = analog
// pupd : 0 = no pull, 1 = pull-up, 2 = pull-down
// speed : 0 = low speed, 1 = medium speed, 2 : high speed, 3 : very high speed
void GPIO_Config(GPIO_TypeDef *GPIOx, uint8_t pin, uint8_t mode, uint8_t pupd, uint8_t speed, uint8_t af) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	4608      	mov	r0, r1
 80001f6:	4611      	mov	r1, r2
 80001f8:	461a      	mov	r2, r3
 80001fa:	4603      	mov	r3, r0
 80001fc:	70fb      	strb	r3, [r7, #3]
 80001fe:	460b      	mov	r3, r1
 8000200:	70bb      	strb	r3, [r7, #2]
 8000202:	4613      	mov	r3, r2
 8000204:	707b      	strb	r3, [r7, #1]
    // Activer l'horloge du port concernÃ© (RCC->AHB1ENR)
    if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a6e      	ldr	r2, [pc, #440]	; (80003c4 <GPIO_Config+0x1d8>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GPIO_Config+0x30>
 800020e:	4a6e      	ldr	r2, [pc, #440]	; (80003c8 <GPIO_Config+0x1dc>)
 8000210:	4b6d      	ldr	r3, [pc, #436]	; (80003c8 <GPIO_Config+0x1dc>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6313      	str	r3, [r2, #48]	; 0x30
 800021a:	e056      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a6b      	ldr	r2, [pc, #428]	; (80003cc <GPIO_Config+0x1e0>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <GPIO_Config+0x46>
 8000224:	4a68      	ldr	r2, [pc, #416]	; (80003c8 <GPIO_Config+0x1dc>)
 8000226:	4b68      	ldr	r3, [pc, #416]	; (80003c8 <GPIO_Config+0x1dc>)
 8000228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022a:	f043 0302 	orr.w	r3, r3, #2
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
 8000230:	e04b      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a66      	ldr	r2, [pc, #408]	; (80003d0 <GPIO_Config+0x1e4>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_Config+0x5c>
 800023a:	4a63      	ldr	r2, [pc, #396]	; (80003c8 <GPIO_Config+0x1dc>)
 800023c:	4b62      	ldr	r3, [pc, #392]	; (80003c8 <GPIO_Config+0x1dc>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000240:	f043 0304 	orr.w	r3, r3, #4
 8000244:	6313      	str	r3, [r2, #48]	; 0x30
 8000246:	e040      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a62      	ldr	r2, [pc, #392]	; (80003d4 <GPIO_Config+0x1e8>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIO_Config+0x72>
 8000250:	4a5d      	ldr	r2, [pc, #372]	; (80003c8 <GPIO_Config+0x1dc>)
 8000252:	4b5d      	ldr	r3, [pc, #372]	; (80003c8 <GPIO_Config+0x1dc>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6313      	str	r3, [r2, #48]	; 0x30
 800025c:	e035      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a5d      	ldr	r2, [pc, #372]	; (80003d8 <GPIO_Config+0x1ec>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIO_Config+0x88>
 8000266:	4a58      	ldr	r2, [pc, #352]	; (80003c8 <GPIO_Config+0x1dc>)
 8000268:	4b57      	ldr	r3, [pc, #348]	; (80003c8 <GPIO_Config+0x1dc>)
 800026a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026c:	f043 0310 	orr.w	r3, r3, #16
 8000270:	6313      	str	r3, [r2, #48]	; 0x30
 8000272:	e02a      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOF) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a59      	ldr	r2, [pc, #356]	; (80003dc <GPIO_Config+0x1f0>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIO_Config+0x9e>
 800027c:	4a52      	ldr	r2, [pc, #328]	; (80003c8 <GPIO_Config+0x1dc>)
 800027e:	4b52      	ldr	r3, [pc, #328]	; (80003c8 <GPIO_Config+0x1dc>)
 8000280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
 8000288:	e01f      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOG) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a54      	ldr	r2, [pc, #336]	; (80003e0 <GPIO_Config+0x1f4>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIO_Config+0xb4>
 8000292:	4a4d      	ldr	r2, [pc, #308]	; (80003c8 <GPIO_Config+0x1dc>)
 8000294:	4b4c      	ldr	r3, [pc, #304]	; (80003c8 <GPIO_Config+0x1dc>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029c:	6313      	str	r3, [r2, #48]	; 0x30
 800029e:	e014      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a50      	ldr	r2, [pc, #320]	; (80003e4 <GPIO_Config+0x1f8>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIO_Config+0xca>
 80002a8:	4a47      	ldr	r2, [pc, #284]	; (80003c8 <GPIO_Config+0x1dc>)
 80002aa:	4b47      	ldr	r3, [pc, #284]	; (80003c8 <GPIO_Config+0x1dc>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
 80002b4:	e009      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOI) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a4b      	ldr	r2, [pc, #300]	; (80003e8 <GPIO_Config+0x1fc>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d105      	bne.n	80002ca <GPIO_Config+0xde>
 80002be:	4a42      	ldr	r2, [pc, #264]	; (80003c8 <GPIO_Config+0x1dc>)
 80002c0:	4b41      	ldr	r3, [pc, #260]	; (80003c8 <GPIO_Config+0x1dc>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30

    // Configurer MODER
    GPIOx->MODER &= ~(0b11 << (pin * 2));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	78fa      	ldrb	r2, [r7, #3]
 80002d0:	0052      	lsls	r2, r2, #1
 80002d2:	2103      	movs	r1, #3
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	43d2      	mvns	r2, r2
 80002da:	401a      	ands	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |=  ((mode & 0b11) << (pin * 2));
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	78ba      	ldrb	r2, [r7, #2]
 80002e6:	f002 0103 	and.w	r1, r2, #3
 80002ea:	78fa      	ldrb	r2, [r7, #3]
 80002ec:	0052      	lsls	r2, r2, #1
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	431a      	orrs	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	601a      	str	r2, [r3, #0]

    // Configurer PUPDR
    GPIOx->PUPDR &= ~(0b11 << (pin * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	78fa      	ldrb	r2, [r7, #3]
 80002fe:	0052      	lsls	r2, r2, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f202 	lsl.w	r2, r1, r2
 8000306:	43d2      	mvns	r2, r2
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	60da      	str	r2, [r3, #12]
    GPIOx->PUPDR |=  ((pupd & 0b11) << (pin * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	787a      	ldrb	r2, [r7, #1]
 8000314:	f002 0103 	and.w	r1, r2, #3
 8000318:	78fa      	ldrb	r2, [r7, #3]
 800031a:	0052      	lsls	r2, r2, #1
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	60da      	str	r2, [r3, #12]

    // Configurer OSPEEDR
    GPIOx->OSPEEDR &= ~(0b11 << (pin * 2));
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	78fa      	ldrb	r2, [r7, #3]
 800032c:	0052      	lsls	r2, r2, #1
 800032e:	2103      	movs	r1, #3
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	43d2      	mvns	r2, r2
 8000336:	401a      	ands	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	609a      	str	r2, [r3, #8]
    GPIOx->OSPEEDR |=  ((speed & 0b11) << (pin * 2));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	7e3a      	ldrb	r2, [r7, #24]
 8000342:	f002 0103 	and.w	r1, r2, #3
 8000346:	78fa      	ldrb	r2, [r7, #3]
 8000348:	0052      	lsls	r2, r2, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	431a      	orrs	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	609a      	str	r2, [r3, #8]

    // setup alternate functions
    if (mode == 2) {
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d12d      	bne.n	80003b6 <GPIO_Config+0x1ca>
            uint8_t afr_index = (pin < 8) ? 0 : 1; // choisir entre AFR low (0) ou high (1)
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	2b07      	cmp	r3, #7
 800035e:	bf8c      	ite	hi
 8000360:	2301      	movhi	r3, #1
 8000362:	2300      	movls	r3, #0
 8000364:	b2db      	uxtb	r3, r3
 8000366:	73fb      	strb	r3, [r7, #15]
            uint8_t afr_shift = (pin % 8) * 4;
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	f003 0307 	and.w	r3, r3, #7
 800036e:	b2db      	uxtb	r3, r3
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	73bb      	strb	r3, [r7, #14]

            GPIOx->AFR[afr_index] &= ~(0xF << afr_shift);
 8000374:	7bfa      	ldrb	r2, [r7, #15]
 8000376:	7bf9      	ldrb	r1, [r7, #15]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3108      	adds	r1, #8
 800037c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000380:	7bb9      	ldrb	r1, [r7, #14]
 8000382:	200f      	movs	r0, #15
 8000384:	fa00 f101 	lsl.w	r1, r0, r1
 8000388:	43c9      	mvns	r1, r1
 800038a:	4019      	ands	r1, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3208      	adds	r2, #8
 8000390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            GPIOx->AFR[afr_index] |=  ((af & 0xF) << afr_shift);
 8000394:	7bfa      	ldrb	r2, [r7, #15]
 8000396:	7bf9      	ldrb	r1, [r7, #15]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3108      	adds	r1, #8
 800039c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80003a0:	7f39      	ldrb	r1, [r7, #28]
 80003a2:	f001 000f 	and.w	r0, r1, #15
 80003a6:	7bb9      	ldrb	r1, [r7, #14]
 80003a8:	fa00 f101 	lsl.w	r1, r0, r1
 80003ac:	4319      	orrs	r1, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3208      	adds	r2, #8
 80003b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40020000 	.word	0x40020000
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020400 	.word	0x40020400
 80003d0:	40020800 	.word	0x40020800
 80003d4:	40020c00 	.word	0x40020c00
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40021400 	.word	0x40021400
 80003e0:	40021800 	.word	0x40021800
 80003e4:	40021c00 	.word	0x40021c00
 80003e8:	40022000 	.word	0x40022000

080003ec <ADC_IRQHandler>:
	// Attendre une interruption
	adc_ready = 0;
	return adc_sample;
}

void ADC_IRQHandler(void) {
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
    if (ADC1->SR & ADC_SR_EOC) {       // EOC = End Of Conversion flag
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <ADC_IRQHandler+0x28>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 0302 	and.w	r3, r3, #2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d006      	beq.n	800040a <ADC_IRQHandler+0x1e>
        adc_sample = ADC1->DR;         // Lecture du DR efface le flag EOC
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <ADC_IRQHandler+0x28>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a05      	ldr	r2, [pc, #20]	; (8000418 <ADC_IRQHandler+0x2c>)
 8000402:	6013      	str	r3, [r2, #0]
        adc_ready = 1;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <ADC_IRQHandler+0x30>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
    }
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40012000 	.word	0x40012000
 8000418:	2000001c 	.word	0x2000001c
 800041c:	20000020 	.word	0x20000020

08000420 <SysTick_Init>:
/*
 * RVR (LOAD) : nombre a partir du lequel la clock decremente (9000=1ms)
 * CVR (VAL) : Current value du compteur
 * CSR (CTRL) : Active interruptions TICKINT, et Enable
*/
void SysTick_Init(uint64_t load_value){
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	e9c7 0100 	strd	r0, r1, [r7]
	SysTick->LOAD |= load_value;
 800042a:	490e      	ldr	r1, [pc, #56]	; (8000464 <SysTick_Init+0x44>)
 800042c:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <SysTick_Init+0x44>)
 800042e:	685a      	ldr	r2, [r3, #4]
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	4313      	orrs	r3, r2
 8000434:	604b      	str	r3, [r1, #4]

	SysTick->VAL |= 0;
 8000436:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <SysTick_Init+0x44>)
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <SysTick_Init+0x44>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	6093      	str	r3, [r2, #8]

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <SysTick_Init+0x44>)
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <SysTick_Init+0x44>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <SysTick_Init+0x44>)
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <SysTick_Init+0x44>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f043 0302 	orr.w	r3, r3, #2
 8000454:	6013      	str	r3, [r2, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000e010 	.word	0xe000e010

08000468 <millis>:

uint64_t millis(){
 8000468:	b490      	push	{r4, r7}
 800046a:	af00      	add	r7, sp, #0
	return millis_count;
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <millis+0x14>)
 800046e:	cb18      	ldmia	r3, {r3, r4}
}
 8000470:	4618      	mov	r0, r3
 8000472:	4621      	mov	r1, r4
 8000474:	46bd      	mov	sp, r7
 8000476:	bc90      	pop	{r4, r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	20000028 	.word	0x20000028

08000480 <SysTick_Handler>:
void delai(uint64_t wait_millis){
	uint64_t millis_target = millis() + wait_millis;
	while(millis() < millis_target);
}

void SysTick_Handler(void){
 8000480:	b490      	push	{r4, r7}
 8000482:	af00      	add	r7, sp, #0
	millis_count = millis_count + 1;
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <SysTick_Handler+0x1c>)
 8000486:	cb18      	ldmia	r3, {r3, r4}
 8000488:	3301      	adds	r3, #1
 800048a:	f144 0400 	adc.w	r4, r4, #0
 800048e:	4a03      	ldr	r2, [pc, #12]	; (800049c <SysTick_Handler+0x1c>)
 8000490:	e882 0018 	stmia.w	r2, {r3, r4}
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc90      	pop	{r4, r7}
 800049a:	4770      	bx	lr
 800049c:	20000028 	.word	0x20000028

080004a0 <main>:
**===========================================================================
*/
volatile uint64_t millis_count = 0;

int main(void)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b089      	sub	sp, #36	; 0x24
 80004a4:	af00      	add	r7, sp, #0
	#ifdef P1
	SysTick_Init(9000); // interruption a chaque 1ms
 80004a6:	f242 3028 	movw	r0, #9000	; 0x2328
 80004aa:	f04f 0100 	mov.w	r1, #0
 80004ae:	f7ff ffb7 	bl	8000420 <SysTick_Init>
	UART5_Config();
 80004b2:	f000 f9d1 	bl	8000858 <UART5_Config>

	uint8_t data_recu;
	uint64_t last_hello = millis();
 80004b6:	f7ff ffd7 	bl	8000468 <millis>
 80004ba:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint64_t timestamp = millis();
 80004be:	f7ff ffd3 	bl	8000468 <millis>
 80004c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
	const char *hello = "Hello World!\n";
 80004c6:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <main+0x98>)
 80004c8:	607b      	str	r3, [r7, #4]

	while(1){
		timestamp = millis();
 80004ca:	f7ff ffcd 	bl	8000468 <millis>
 80004ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
		if (timestamp - last_hello > 1000){ // envoie périodique de Hello World
 80004d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80004d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80004da:	1acb      	subs	r3, r1, r3
 80004dc:	eb62 0404 	sbc.w	r4, r2, r4
 80004e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004e4:	f04f 0200 	mov.w	r2, #0
 80004e8:	42a2      	cmp	r2, r4
 80004ea:	bf08      	it	eq
 80004ec:	4299      	cmpeq	r1, r3
 80004ee:	d216      	bcs.n	800051e <main+0x7e>
			for (uint32_t i = 0; hello[i] != '\0'; i++){
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	e009      	b.n	800050a <main+0x6a>
				UART5_SendByte(hello[i]);
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	4413      	add	r3, r2
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fa2c 	bl	800095c <UART5_SendByte>
			for (uint32_t i = 0; hello[i] != '\0'; i++){
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	3301      	adds	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	4413      	add	r3, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1ef      	bne.n	80004f6 <main+0x56>
			}
			last_hello = timestamp;
 8000516:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800051a:	e9c7 3406 	strd	r3, r4, [r7, #24]
		}

		// renvoie des données reçues
		data_recu = UART5_ReadByte();
 800051e:	f000 fa37 	bl	8000990 <UART5_ReadByte>
 8000522:	4603      	mov	r3, r0
 8000524:	70fb      	strb	r3, [r7, #3]
		if (data_recu != 0) {
 8000526:	78fb      	ldrb	r3, [r7, #3]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0ce      	beq.n	80004ca <main+0x2a>
			UART5_SendByte(data_recu);
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fa14 	bl	800095c <UART5_SendByte>
		timestamp = millis();
 8000534:	e7c9      	b.n	80004ca <main+0x2a>
 8000536:	bf00      	nop
 8000538:	08000a88 	.word	0x08000a88

0800053c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800053c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000574 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000540:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000542:	e003      	b.n	800054c <LoopCopyDataInit>

08000544 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000546:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000548:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800054a:	3104      	adds	r1, #4

0800054c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000550:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000552:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000554:	d3f6      	bcc.n	8000544 <CopyDataInit>
  ldr  r2, =_sbss
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000558:	e002      	b.n	8000560 <LoopFillZerobss>

0800055a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800055a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800055c:	f842 3b04 	str.w	r3, [r2], #4

08000560 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000562:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000564:	d3f9      	bcc.n	800055a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000566:	f000 f83b 	bl	80005e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056a:	f000 fa5d 	bl	8000a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800056e:	f7ff ff97 	bl	80004a0 <main>
  bx  lr    
 8000572:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000574:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000578:	08000aa0 	.word	0x08000aa0
  ldr  r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000580:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000584:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000588:	20000138 	.word	0x20000138

0800058c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800058c:	e7fe      	b.n	800058c <CAN1_RX0_IRQHandler>

0800058e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <HardFault_Handler+0x4>

080005a2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <MemManage_Handler+0x4>

080005a8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <BusFault_Handler+0x4>

080005ae <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <UsageFault_Handler+0x4>

080005b4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005e4:	4a16      	ldr	r2, [pc, #88]	; (8000640 <SystemInit+0x60>)
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <SystemInit+0x60>)
 80005e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <SystemInit+0x64>)
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <SystemInit+0x64>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <SystemInit+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <SystemInit+0x64>)
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <SystemInit+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000614:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <SystemInit+0x64>)
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <SystemInit+0x68>)
 800061a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800061c:	4a09      	ldr	r2, [pc, #36]	; (8000644 <SystemInit+0x64>)
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <SystemInit+0x64>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000626:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <SystemInit+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800062e:	f000 f80d 	bl	800064c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <SystemInit+0x60>)
 8000634:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000638:	609a      	str	r2, [r3, #8]
#endif
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00
 8000644:	40023800 	.word	0x40023800
 8000648:	24003010 	.word	0x24003010

0800064c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800065a:	4a36      	ldr	r2, [pc, #216]	; (8000734 <SetSysClock+0xe8>)
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <SetSysClock+0xe8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000664:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000666:	4b33      	ldr	r3, [pc, #204]	; (8000734 <SetSysClock+0xe8>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3301      	adds	r3, #1
 8000674:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d103      	bne.n	8000684 <SetSysClock+0x38>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000682:	d1f0      	bne.n	8000666 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <SetSysClock+0xe8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000690:	2301      	movs	r3, #1
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	e001      	b.n	800069a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d142      	bne.n	8000726 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006a0:	4a24      	ldr	r2, [pc, #144]	; (8000734 <SetSysClock+0xe8>)
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <SetSysClock+0xe8>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <SetSysClock+0xec>)
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SetSysClock+0xec>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006b8:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <SetSysClock+0xe8>)
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <SetSysClock+0xe8>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006c0:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <SetSysClock+0xe8>)
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <SetSysClock+0xe8>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ca:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006cc:	4a19      	ldr	r2, [pc, #100]	; (8000734 <SetSysClock+0xe8>)
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <SetSysClock+0xe8>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80006d6:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <SetSysClock+0xe8>)
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <SetSysClock+0xf0>)
 80006dc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006de:	4a15      	ldr	r2, [pc, #84]	; (8000734 <SetSysClock+0xe8>)
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <SetSysClock+0xe8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006e8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006ea:	bf00      	nop
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <SetSysClock+0xe8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0f9      	beq.n	80006ec <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <SetSysClock+0xf4>)
 80006fa:	f240 7205 	movw	r2, #1797	; 0x705
 80006fe:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <SetSysClock+0xe8>)
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <SetSysClock+0xe8>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	f023 0303 	bic.w	r3, r3, #3
 800070a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800070c:	4a09      	ldr	r2, [pc, #36]	; (8000734 <SetSysClock+0xe8>)
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <SetSysClock+0xe8>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000718:	bf00      	nop
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <SetSysClock+0xe8>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	f003 030c 	and.w	r3, r3, #12
 8000722:	2b08      	cmp	r3, #8
 8000724:	d1f9      	bne.n	800071a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000
 800073c:	03401204 	.word	0x03401204
 8000740:	40023c00 	.word	0x40023c00

08000744 <_fifo_pleine>:
// init fifo
static FIFO uart5_rx_fifo = { .tete = 0, .queue = 0 };
static FIFO uart5_tx_fifo = { .tete = 0, .queue = 0 };


int _fifo_pleine(FIFO* f){
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	return ((f->tete + 1) % UART5_FIFO_TAILLE) == f->queue;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000752:	b29b      	uxth	r3, r3
 8000754:	3301      	adds	r3, #1
 8000756:	425a      	negs	r2, r3
 8000758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800075c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000760:	bf58      	it	pl
 8000762:	4253      	negpl	r3, r2
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 800076a:	b292      	uxth	r2, r2
 800076c:	4293      	cmp	r3, r2
 800076e:	bf0c      	ite	eq
 8000770:	2301      	moveq	r3, #1
 8000772:	2300      	movne	r3, #0
 8000774:	b2db      	uxtb	r3, r3
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <_fifo_vide>:

int _fifo_vide(FIFO* f){
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	return f->tete == f->queue;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000790:	b29a      	uxth	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000798:	b29b      	uxth	r3, r3
 800079a:	429a      	cmp	r2, r3
 800079c:	bf0c      	ite	eq
 800079e:	2301      	moveq	r3, #1
 80007a0:	2300      	movne	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_fifo_push>:

void _fifo_push(FIFO* f, uint8_t data){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	if (!_fifo_pleine(f)){
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ffc1 	bl	8000744 <_fifo_pleine>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d117      	bne.n	80007f8 <_fifo_push+0x48>
		f->buffer[f->tete] = data;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	78fa      	ldrb	r2, [r7, #3]
 80007d6:	545a      	strb	r2, [r3, r1]
		f->tete = (f->tete + 1) % UART5_FIFO_TAILLE;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80007de:	b29b      	uxth	r3, r3
 80007e0:	3301      	adds	r3, #1
 80007e2:	425a      	negs	r2, r3
 80007e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80007ec:	bf58      	it	pl
 80007ee:	4253      	negpl	r3, r2
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	}
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_fifo_pop>:

int _fifo_pop(FIFO* f, uint8_t* out){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
    if (_fifo_vide(f)) return 0;
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffb9 	bl	8000782 <_fifo_vide>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <_fifo_pop+0x1a>
 8000816:	2300      	movs	r3, #0
 8000818:	e019      	b.n	800084e <_fifo_pop+0x4e>
    *out = f->buffer[f->queue];
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000820:	b29b      	uxth	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	5c9a      	ldrb	r2, [r3, r2]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	701a      	strb	r2, [r3, #0]
    f->queue = (f->queue + 1) % UART5_FIFO_TAILLE;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000832:	b29b      	uxth	r3, r3
 8000834:	3301      	adds	r3, #1
 8000836:	425a      	negs	r2, r3
 8000838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800083c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000840:	bf58      	it	pl
 8000842:	4253      	negpl	r3, r2
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    return 1;
 800084c:	2301      	movs	r3, #1
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <UART5_Config>:

void UART5_Config(){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af02      	add	r7, sp, #8
	// Activer clk : UART5 => APB1
	RCC->APB1ENR |= RCC_APB1ENR_UART5EN;
 800085e:	4a3a      	ldr	r2, [pc, #232]	; (8000948 <UART5_Config+0xf0>)
 8000860:	4b39      	ldr	r3, [pc, #228]	; (8000948 <UART5_Config+0xf0>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40

	// Setup pins (PC12 pour le tx, PD2 pour le rx)
	GPIO_Config(GPIOC, 12, 2, 0, 2, 8);
 800086a:	2308      	movs	r3, #8
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	2302      	movs	r3, #2
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	2202      	movs	r2, #2
 8000876:	210c      	movs	r1, #12
 8000878:	4834      	ldr	r0, [pc, #208]	; (800094c <UART5_Config+0xf4>)
 800087a:	f7ff fcb7 	bl	80001ec <GPIO_Config>
	GPIO_Config(GPIOD, 2, 2, 0, 2, 8);
 800087e:	2308      	movs	r3, #8
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2302      	movs	r3, #2
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	2202      	movs	r2, #2
 800088a:	2102      	movs	r1, #2
 800088c:	4830      	ldr	r0, [pc, #192]	; (8000950 <UART5_Config+0xf8>)
 800088e:	f7ff fcad 	bl	80001ec <GPIO_Config>

	// 1. Désactive UART pendant config
	UART5->CR1 &= ~BIT13;
 8000892:	4a30      	ldr	r2, [pc, #192]	; (8000954 <UART5_Config+0xfc>)
 8000894:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <UART5_Config+0xfc>)
 8000896:	899b      	ldrh	r3, [r3, #12]
 8000898:	b29b      	uxth	r3, r3
 800089a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800089e:	b29b      	uxth	r3, r3
 80008a0:	8193      	strh	r3, [r2, #12]

	// 2. Taille mot (8)
	UART5->CR1 &= ~BIT12;
 80008a2:	4a2c      	ldr	r2, [pc, #176]	; (8000954 <UART5_Config+0xfc>)
 80008a4:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <UART5_Config+0xfc>)
 80008a6:	899b      	ldrh	r3, [r3, #12]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	8193      	strh	r3, [r2, #12]

	// Activer interrupt RXNEIE
	UART5->CR1 |= BIT5;
 80008b2:	4a28      	ldr	r2, [pc, #160]	; (8000954 <UART5_Config+0xfc>)
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <UART5_Config+0xfc>)
 80008b6:	899b      	ldrh	r3, [r3, #12]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	b29b      	uxth	r3, r3
 80008c0:	8193      	strh	r3, [r2, #12]

	// Parité paire
	UART5->CR1 |= BIT10;
 80008c2:	4a24      	ldr	r2, [pc, #144]	; (8000954 <UART5_Config+0xfc>)
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <UART5_Config+0xfc>)
 80008c6:	899b      	ldrh	r3, [r3, #12]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	8193      	strh	r3, [r2, #12]
	UART5->CR1 &= ~BIT9;
 80008d2:	4a20      	ldr	r2, [pc, #128]	; (8000954 <UART5_Config+0xfc>)
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <UART5_Config+0xfc>)
 80008d6:	899b      	ldrh	r3, [r3, #12]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008de:	b29b      	uxth	r3, r3
 80008e0:	8193      	strh	r3, [r2, #12]

	// 3. Stop bits (1)
	UART5->CR2 &= ~BIT12;
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <UART5_Config+0xfc>)
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <UART5_Config+0xfc>)
 80008e6:	8a1b      	ldrh	r3, [r3, #16]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	8213      	strh	r3, [r2, #16]
	UART5->CR2 &= ~BIT13;
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <UART5_Config+0xfc>)
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <UART5_Config+0xfc>)
 80008f6:	8a1b      	ldrh	r3, [r3, #16]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008fe:	b29b      	uxth	r3, r3
 8000900:	8213      	strh	r3, [r2, #16]

	// 5. Baudrate de 115200 (APB1 a un prescaler de 4 selon system_stm32f4xx.c)
	UART5->BRR = (uint16_t)(((SYS_CLOCK_FREQ / 4.0f) / (16.0f * 115200)) * 16.0f);
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <UART5_Config+0xfc>)
 8000904:	229c      	movs	r2, #156	; 0x9c
 8000906:	811a      	strh	r2, [r3, #8]


	// 6. activer transmitter et receiver
	UART5->CR1 |= BIT3;
 8000908:	4a12      	ldr	r2, [pc, #72]	; (8000954 <UART5_Config+0xfc>)
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <UART5_Config+0xfc>)
 800090c:	899b      	ldrh	r3, [r3, #12]
 800090e:	b29b      	uxth	r3, r3
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	b29b      	uxth	r3, r3
 8000916:	8193      	strh	r3, [r2, #12]
	UART5->CR1 |= BIT2;
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <UART5_Config+0xfc>)
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <UART5_Config+0xfc>)
 800091c:	899b      	ldrh	r3, [r3, #12]
 800091e:	b29b      	uxth	r3, r3
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	b29b      	uxth	r3, r3
 8000926:	8193      	strh	r3, [r2, #12]

	// enable uart
	UART5->CR1 |= BIT13;
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <UART5_Config+0xfc>)
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <UART5_Config+0xfc>)
 800092c:	899b      	ldrh	r3, [r3, #12]
 800092e:	b29b      	uxth	r3, r3
 8000930:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000934:	b29b      	uxth	r3, r3
 8000936:	8193      	strh	r3, [r2, #12]

	// activer interrupt NVIC
	NVIC->ISER[1] = BIT21;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <UART5_Config+0x100>)
 800093a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800093e:	605a      	str	r2, [r3, #4]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020800 	.word	0x40020800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40005000 	.word	0x40005000
 8000958:	e000e100 	.word	0xe000e100

0800095c <UART5_SendByte>:

void UART5_SendByte(uint8_t data) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
    _fifo_push(&uart5_tx_fifo, data);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4619      	mov	r1, r3
 800096a:	4807      	ldr	r0, [pc, #28]	; (8000988 <UART5_SendByte+0x2c>)
 800096c:	f7ff ff20 	bl	80007b0 <_fifo_push>
    UART5->CR1 |= BIT7; // activer TXE interrupt
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <UART5_SendByte+0x30>)
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <UART5_SendByte+0x30>)
 8000974:	899b      	ldrh	r3, [r3, #12]
 8000976:	b29b      	uxth	r3, r3
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	b29b      	uxth	r3, r3
 800097e:	8193      	strh	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000b4 	.word	0x200000b4
 800098c:	40005000 	.word	0x40005000

08000990 <UART5_ReadByte>:

uint8_t UART5_ReadByte(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	71fb      	strb	r3, [r7, #7]
    _fifo_pop(&uart5_rx_fifo, &data);
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	4619      	mov	r1, r3
 800099e:	4804      	ldr	r0, [pc, #16]	; (80009b0 <UART5_ReadByte+0x20>)
 80009a0:	f7ff ff2e 	bl	8000800 <_fifo_pop>
    return data;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000030 	.word	0x20000030

080009b4 <UART5_IRQHandler>:

// verifie flag pour savoir si transmission ou réception
void UART5_IRQHandler(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	uint8_t data;
	uint8_t txdata;
	if (UART5->SR & BIT7){ // TXE
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <UART5_IRQHandler+0x68>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d014      	beq.n	80009f2 <UART5_IRQHandler+0x3e>
	    if (_fifo_pop(&uart5_tx_fifo, &txdata)){
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	4619      	mov	r1, r3
 80009cc:	4814      	ldr	r0, [pc, #80]	; (8000a20 <UART5_IRQHandler+0x6c>)
 80009ce:	f7ff ff17 	bl	8000800 <_fifo_pop>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <UART5_IRQHandler+0x2e>
	        UART5->DR = txdata & 0xFF;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <UART5_IRQHandler+0x68>)
 80009da:	79ba      	ldrb	r2, [r7, #6]
 80009dc:	b292      	uxth	r2, r2
 80009de:	809a      	strh	r2, [r3, #4]
 80009e0:	e007      	b.n	80009f2 <UART5_IRQHandler+0x3e>
	    } else {
	        UART5->CR1 &= ~BIT7;       // plus rien à envoyer, couper l'interrupt TXE
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <UART5_IRQHandler+0x68>)
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <UART5_IRQHandler+0x68>)
 80009e6:	899b      	ldrh	r3, [r3, #12]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	8193      	strh	r3, [r2, #12]
	    }
	    }
	if (UART5->SR & BIT5){ // réception en attente
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <UART5_IRQHandler+0x68>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	f003 0320 	and.w	r3, r3, #32
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d008      	beq.n	8000a12 <UART5_IRQHandler+0x5e>
		data = (uint8_t)(UART5->DR & 0xFF); // 8 premier bits du registre DR, lire DR réinitialise le flag RXNE
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <UART5_IRQHandler+0x68>)
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	71fb      	strb	r3, [r7, #7]
		_fifo_push(&uart5_rx_fifo, data);
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <UART5_IRQHandler+0x70>)
 8000a0e:	f7ff fecf 	bl	80007b0 <_fifo_push>
	}
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40005000 	.word	0x40005000
 8000a20:	200000b4 	.word	0x200000b4
 8000a24:	20000030 	.word	0x20000030

08000a28 <__libc_init_array>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	4e0d      	ldr	r6, [pc, #52]	; (8000a60 <__libc_init_array+0x38>)
 8000a2c:	4c0d      	ldr	r4, [pc, #52]	; (8000a64 <__libc_init_array+0x3c>)
 8000a2e:	1ba4      	subs	r4, r4, r6
 8000a30:	10a4      	asrs	r4, r4, #2
 8000a32:	2500      	movs	r5, #0
 8000a34:	42a5      	cmp	r5, r4
 8000a36:	d109      	bne.n	8000a4c <__libc_init_array+0x24>
 8000a38:	4e0b      	ldr	r6, [pc, #44]	; (8000a68 <__libc_init_array+0x40>)
 8000a3a:	4c0c      	ldr	r4, [pc, #48]	; (8000a6c <__libc_init_array+0x44>)
 8000a3c:	f000 f818 	bl	8000a70 <_init>
 8000a40:	1ba4      	subs	r4, r4, r6
 8000a42:	10a4      	asrs	r4, r4, #2
 8000a44:	2500      	movs	r5, #0
 8000a46:	42a5      	cmp	r5, r4
 8000a48:	d105      	bne.n	8000a56 <__libc_init_array+0x2e>
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a50:	4798      	blx	r3
 8000a52:	3501      	adds	r5, #1
 8000a54:	e7ee      	b.n	8000a34 <__libc_init_array+0xc>
 8000a56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a5a:	4798      	blx	r3
 8000a5c:	3501      	adds	r5, #1
 8000a5e:	e7f2      	b.n	8000a46 <__libc_init_array+0x1e>
 8000a60:	08000a98 	.word	0x08000a98
 8000a64:	08000a98 	.word	0x08000a98
 8000a68:	08000a98 	.word	0x08000a98
 8000a6c:	08000a9c 	.word	0x08000a9c

08000a70 <_init>:
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a72:	bf00      	nop
 8000a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a76:	bc08      	pop	{r3}
 8000a78:	469e      	mov	lr, r3
 8000a7a:	4770      	bx	lr

08000a7c <_fini>:
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7e:	bf00      	nop
 8000a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a82:	bc08      	pop	{r3}
 8000a84:	469e      	mov	lr, r3
 8000a86:	4770      	bx	lr
