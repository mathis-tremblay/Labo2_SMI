
Labo2_SMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000570  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800071c  08000724  00010724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800071c  0800071c  0001071c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000720  08000720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010724  2**0
                  CONTENTS
  7 .bss          00000030  20000000  20000000  00020000  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20000030  20000030  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010724  2**0
                  CONTENTS, READONLY
 10 .debug_info   000026c6  00000000  00000000  00010754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000085c  00000000  00000000  00012e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002c8  00000000  00000000  00013678  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000250  00000000  00000000  00013940  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000011cd  00000000  00000000  00013b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001233  00000000  00000000  00014d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00015f90  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000009e0  00000000  00000000  0001600c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000169ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000704 	.word	0x08000704

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000704 	.word	0x08000704

080001ec <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800020a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800020e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	791b      	ldrb	r3, [r3, #4]
 8000214:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800021a:	4313      	orrs	r3, r2
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	4313      	orrs	r3, r2
 8000220:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <ADC_Init+0xa8>)
 8000232:	4013      	ands	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800023e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000244:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	795b      	ldrb	r3, [r3, #5]
 800024a:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800024c:	4313      	orrs	r3, r2
 800024e:	68fa      	ldr	r2, [r7, #12]
 8000250:	4313      	orrs	r3, r2
 8000252:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800025e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000266:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	7d1b      	ldrb	r3, [r3, #20]
 800026c:	3b01      	subs	r3, #1
 800026e:	b2da      	uxtb	r2, r3
 8000270:	7afb      	ldrb	r3, [r7, #11]
 8000272:	4313      	orrs	r3, r2
 8000274:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000276:	7afb      	ldrb	r3, [r7, #11]
 8000278:	051b      	lsls	r3, r3, #20
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000286:	bf00      	nop
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	c0fff7fd 	.word	0xc0fff7fd

08000298 <GPIO_Config>:


// mode : 0 = input, 1 = output, 2 = alternate, 3 = analog
// pupd : 0 = no pull, 1 = pull-up, 2 = pull-down
// speed : 0 = low speed, 1 = medium speed, 2 : high speed, 3 : very high speed
void GPIO_Config(GPIO_TypeDef *GPIOx, uint8_t pin, uint8_t mode, uint8_t pupd, uint8_t speed) {
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	4608      	mov	r0, r1
 80002a2:	4611      	mov	r1, r2
 80002a4:	461a      	mov	r2, r3
 80002a6:	4603      	mov	r3, r0
 80002a8:	70fb      	strb	r3, [r7, #3]
 80002aa:	460b      	mov	r3, r1
 80002ac:	70bb      	strb	r3, [r7, #2]
 80002ae:	4613      	mov	r3, r2
 80002b0:	707b      	strb	r3, [r7, #1]
    // Activer l'horloge du port concernÃ© (RCC->AHB1ENR)
    if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a55      	ldr	r2, [pc, #340]	; (800040c <GPIO_Config+0x174>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_Config+0x30>
 80002ba:	4a55      	ldr	r2, [pc, #340]	; (8000410 <GPIO_Config+0x178>)
 80002bc:	4b54      	ldr	r3, [pc, #336]	; (8000410 <GPIO_Config+0x178>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
 80002c6:	e056      	b.n	8000376 <GPIO_Config+0xde>
    else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a52      	ldr	r2, [pc, #328]	; (8000414 <GPIO_Config+0x17c>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_Config+0x46>
 80002d0:	4a4f      	ldr	r2, [pc, #316]	; (8000410 <GPIO_Config+0x178>)
 80002d2:	4b4f      	ldr	r3, [pc, #316]	; (8000410 <GPIO_Config+0x178>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6313      	str	r3, [r2, #48]	; 0x30
 80002dc:	e04b      	b.n	8000376 <GPIO_Config+0xde>
    else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a4d      	ldr	r2, [pc, #308]	; (8000418 <GPIO_Config+0x180>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_Config+0x5c>
 80002e6:	4a4a      	ldr	r2, [pc, #296]	; (8000410 <GPIO_Config+0x178>)
 80002e8:	4b49      	ldr	r3, [pc, #292]	; (8000410 <GPIO_Config+0x178>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
 80002f2:	e040      	b.n	8000376 <GPIO_Config+0xde>
    else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a49      	ldr	r2, [pc, #292]	; (800041c <GPIO_Config+0x184>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_Config+0x72>
 80002fc:	4a44      	ldr	r2, [pc, #272]	; (8000410 <GPIO_Config+0x178>)
 80002fe:	4b44      	ldr	r3, [pc, #272]	; (8000410 <GPIO_Config+0x178>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
 8000308:	e035      	b.n	8000376 <GPIO_Config+0xde>
    else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a44      	ldr	r2, [pc, #272]	; (8000420 <GPIO_Config+0x188>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_Config+0x88>
 8000312:	4a3f      	ldr	r2, [pc, #252]	; (8000410 <GPIO_Config+0x178>)
 8000314:	4b3e      	ldr	r3, [pc, #248]	; (8000410 <GPIO_Config+0x178>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
 800031e:	e02a      	b.n	8000376 <GPIO_Config+0xde>
    else if (GPIOx == GPIOF) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a40      	ldr	r2, [pc, #256]	; (8000424 <GPIO_Config+0x18c>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_Config+0x9e>
 8000328:	4a39      	ldr	r2, [pc, #228]	; (8000410 <GPIO_Config+0x178>)
 800032a:	4b39      	ldr	r3, [pc, #228]	; (8000410 <GPIO_Config+0x178>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	f043 0320 	orr.w	r3, r3, #32
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
 8000334:	e01f      	b.n	8000376 <GPIO_Config+0xde>
    else if (GPIOx == GPIOG) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a3b      	ldr	r2, [pc, #236]	; (8000428 <GPIO_Config+0x190>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_Config+0xb4>
 800033e:	4a34      	ldr	r2, [pc, #208]	; (8000410 <GPIO_Config+0x178>)
 8000340:	4b33      	ldr	r3, [pc, #204]	; (8000410 <GPIO_Config+0x178>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
 800034a:	e014      	b.n	8000376 <GPIO_Config+0xde>
    else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a37      	ldr	r2, [pc, #220]	; (800042c <GPIO_Config+0x194>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_Config+0xca>
 8000354:	4a2e      	ldr	r2, [pc, #184]	; (8000410 <GPIO_Config+0x178>)
 8000356:	4b2e      	ldr	r3, [pc, #184]	; (8000410 <GPIO_Config+0x178>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
 8000360:	e009      	b.n	8000376 <GPIO_Config+0xde>
    else if (GPIOx == GPIOI) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a32      	ldr	r2, [pc, #200]	; (8000430 <GPIO_Config+0x198>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d105      	bne.n	8000376 <GPIO_Config+0xde>
 800036a:	4a29      	ldr	r2, [pc, #164]	; (8000410 <GPIO_Config+0x178>)
 800036c:	4b28      	ldr	r3, [pc, #160]	; (8000410 <GPIO_Config+0x178>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000374:	6313      	str	r3, [r2, #48]	; 0x30

    // Configurer MODER
    GPIOx->MODER &= ~(0b11 << (pin * 2));
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	78fa      	ldrb	r2, [r7, #3]
 800037c:	0052      	lsls	r2, r2, #1
 800037e:	2103      	movs	r1, #3
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	43d2      	mvns	r2, r2
 8000386:	401a      	ands	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |=  ((mode & 0b11) << (pin * 2));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	78ba      	ldrb	r2, [r7, #2]
 8000392:	f002 0103 	and.w	r1, r2, #3
 8000396:	78fa      	ldrb	r2, [r7, #3]
 8000398:	0052      	lsls	r2, r2, #1
 800039a:	fa01 f202 	lsl.w	r2, r1, r2
 800039e:	431a      	orrs	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	601a      	str	r2, [r3, #0]

    // Configurer PUPDR
    GPIOx->PUPDR &= ~(0b11 << (pin * 2));
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	78fa      	ldrb	r2, [r7, #3]
 80003aa:	0052      	lsls	r2, r2, #1
 80003ac:	2103      	movs	r1, #3
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	60da      	str	r2, [r3, #12]
    GPIOx->PUPDR |=  ((pupd & 0b11) << (pin * 2));
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	787a      	ldrb	r2, [r7, #1]
 80003c0:	f002 0103 	and.w	r1, r2, #3
 80003c4:	78fa      	ldrb	r2, [r7, #3]
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	fa01 f202 	lsl.w	r2, r1, r2
 80003cc:	431a      	orrs	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	60da      	str	r2, [r3, #12]

    // Configurer OSPEEDR
    GPIOx->OSPEEDR &= ~(0b11 << (pin * 2));
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	78fa      	ldrb	r2, [r7, #3]
 80003d8:	0052      	lsls	r2, r2, #1
 80003da:	2103      	movs	r1, #3
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	401a      	ands	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	609a      	str	r2, [r3, #8]
    GPIOx->OSPEEDR |=  ((speed & 0b11) << (pin * 2));
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	7c3a      	ldrb	r2, [r7, #16]
 80003ee:	f002 0103 	and.w	r1, r2, #3
 80003f2:	78fa      	ldrb	r2, [r7, #3]
 80003f4:	0052      	lsls	r2, r2, #1
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	431a      	orrs	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	609a      	str	r2, [r3, #8]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40020000 	.word	0x40020000
 8000410:	40023800 	.word	0x40023800
 8000414:	40020400 	.word	0x40020400
 8000418:	40020800 	.word	0x40020800
 800041c:	40020c00 	.word	0x40020c00
 8000420:	40021000 	.word	0x40021000
 8000424:	40021400 	.word	0x40021400
 8000428:	40021800 	.word	0x40021800
 800042c:	40021c00 	.word	0x40021c00
 8000430:	40022000 	.word	0x40022000

08000434 <ADC_IRQHandler>:

	adc_ready = 0;
	return adc_sample;
}

void ADC_IRQHandler(ADC_TypeDef * ADCx){
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	if (ADCx->SR & BIT1) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f003 0302 	and.w	r3, r3, #2
 8000444:	2b00      	cmp	r3, #0
 8000446:	d006      	beq.n	8000456 <ADC_IRQHandler+0x22>
		// Lire donnée
	    adc_sample = ADCx->DR;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <ADC_IRQHandler+0x30>)
 800044e:	6013      	str	r3, [r2, #0]

	    // Signaler échantillon dispo
	    adc_ready = 1;
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <ADC_IRQHandler+0x34>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]

	    // Lecture DR clear le flag EOC
	}
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	2000001c 	.word	0x2000001c
 8000468:	20000020 	.word	0x20000020

0800046c <SysTick_Handler>:
void delai(uint64_t wait_millis){
	uint64_t millis_target = millis() + wait_millis;
	while(millis() < millis_target);
}

void SysTick_Handler(void){
 800046c:	b490      	push	{r4, r7}
 800046e:	af00      	add	r7, sp, #0
	millis_count++;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <SysTick_Handler+0x1c>)
 8000472:	cb18      	ldmia	r3, {r3, r4}
 8000474:	3301      	adds	r3, #1
 8000476:	f144 0400 	adc.w	r4, r4, #0
 800047a:	4a03      	ldr	r2, [pc, #12]	; (8000488 <SysTick_Handler+0x1c>)
 800047c:	e882 0018 	stmia.w	r2, {r3, r4}
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc90      	pop	{r4, r7}
 8000486:	4770      	bx	lr
 8000488:	20000028 	.word	0x20000028

0800048c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af02      	add	r7, sp, #8
	#ifdef P1
	GPIO_Config(GPIOC, 3, 3, 0, 0); // Mode 3 pour analog
 8000492:	2300      	movs	r3, #0
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2300      	movs	r3, #0
 8000498:	2203      	movs	r2, #3
 800049a:	2103      	movs	r1, #3
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <main+0x20>)
 800049e:	f7ff fefb 	bl	8000298 <GPIO_Config>
	ADC_Init(ADC1, 13);
 80004a2:	210d      	movs	r1, #13
 80004a4:	4802      	ldr	r0, [pc, #8]	; (80004b0 <main+0x24>)
 80004a6:	f7ff fea1 	bl	80001ec <ADC_Init>
	while (1){
 80004aa:	e7fe      	b.n	80004aa <main+0x1e>
 80004ac:	40020800 	.word	0x40020800
 80004b0:	40012000 	.word	0x40012000

080004b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004ec <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004ba:	e003      	b.n	80004c4 <LoopCopyDataInit>

080004bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004c2:	3104      	adds	r1, #4

080004c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004c4:	480b      	ldr	r0, [pc, #44]	; (80004f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004cc:	d3f6      	bcc.n	80004bc <CopyDataInit>
  ldr  r2, =_sbss
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004d0:	e002      	b.n	80004d8 <LoopFillZerobss>

080004d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004d4:	f842 3b04 	str.w	r3, [r2], #4

080004d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004dc:	d3f9      	bcc.n	80004d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004de:	f000 f83b 	bl	8000558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e2:	f000 f8eb 	bl	80006bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004e6:	f7ff ffd1 	bl	800048c <main>
  bx  lr    
 80004ea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004ec:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80004f0:	08000724 	.word	0x08000724
  ldr  r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004f8:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80004fc:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000500:	20000030 	.word	0x20000030

08000504 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <CAN1_RX0_IRQHandler>

08000506 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000518:	e7fe      	b.n	8000518 <HardFault_Handler+0x4>

0800051a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800051e:	e7fe      	b.n	800051e <MemManage_Handler+0x4>

08000520 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000524:	e7fe      	b.n	8000524 <BusFault_Handler+0x4>

08000526 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800052a:	e7fe      	b.n	800052a <UsageFault_Handler+0x4>

0800052c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800055c:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <SystemInit+0x60>)
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <SystemInit+0x60>)
 8000560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800056c:	4a13      	ldr	r2, [pc, #76]	; (80005bc <SystemInit+0x64>)
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <SystemInit+0x64>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <SystemInit+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <SystemInit+0x64>)
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <SystemInit+0x64>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <SystemInit+0x64>)
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <SystemInit+0x68>)
 8000592:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000594:	4a09      	ldr	r2, [pc, #36]	; (80005bc <SystemInit+0x64>)
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <SystemInit+0x64>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800059e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <SystemInit+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80005a6:	f000 f80d 	bl	80005c4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005aa:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <SystemInit+0x60>)
 80005ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005b0:	609a      	str	r2, [r3, #8]
#endif
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00
 80005bc:	40023800 	.word	0x40023800
 80005c0:	24003010 	.word	0x24003010

080005c4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80005d2:	4a36      	ldr	r2, [pc, #216]	; (80006ac <SetSysClock+0xe8>)
 80005d4:	4b35      	ldr	r3, [pc, #212]	; (80006ac <SetSysClock+0xe8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005dc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <SetSysClock+0xe8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <SetSysClock+0x38>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005fa:	d1f0      	bne.n	80005de <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <SetSysClock+0xe8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d002      	beq.n	800060e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000608:	2301      	movs	r3, #1
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	e001      	b.n	8000612 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d142      	bne.n	800069e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000618:	4a24      	ldr	r2, [pc, #144]	; (80006ac <SetSysClock+0xe8>)
 800061a:	4b24      	ldr	r3, [pc, #144]	; (80006ac <SetSysClock+0xe8>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <SetSysClock+0xec>)
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SetSysClock+0xec>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000630:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <SetSysClock+0xe8>)
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <SetSysClock+0xe8>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000638:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <SetSysClock+0xe8>)
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <SetSysClock+0xe8>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000642:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <SetSysClock+0xe8>)
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <SetSysClock+0xe8>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800064e:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <SetSysClock+0xe8>)
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <SetSysClock+0xf0>)
 8000654:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <SetSysClock+0xe8>)
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <SetSysClock+0xe8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000660:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000662:	bf00      	nop
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <SetSysClock+0xe8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f9      	beq.n	8000664 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <SetSysClock+0xf4>)
 8000672:	f240 7205 	movw	r2, #1797	; 0x705
 8000676:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <SetSysClock+0xe8>)
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <SetSysClock+0xe8>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f023 0303 	bic.w	r3, r3, #3
 8000682:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000684:	4a09      	ldr	r2, [pc, #36]	; (80006ac <SetSysClock+0xe8>)
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <SetSysClock+0xe8>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000690:	bf00      	nop
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <SetSysClock+0xe8>)
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f003 030c 	and.w	r3, r3, #12
 800069a:	2b08      	cmp	r3, #8
 800069c:	d1f9      	bne.n	8000692 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000
 80006b4:	03401204 	.word	0x03401204
 80006b8:	40023c00 	.word	0x40023c00

080006bc <__libc_init_array>:
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	4e0d      	ldr	r6, [pc, #52]	; (80006f4 <__libc_init_array+0x38>)
 80006c0:	4c0d      	ldr	r4, [pc, #52]	; (80006f8 <__libc_init_array+0x3c>)
 80006c2:	1ba4      	subs	r4, r4, r6
 80006c4:	10a4      	asrs	r4, r4, #2
 80006c6:	2500      	movs	r5, #0
 80006c8:	42a5      	cmp	r5, r4
 80006ca:	d109      	bne.n	80006e0 <__libc_init_array+0x24>
 80006cc:	4e0b      	ldr	r6, [pc, #44]	; (80006fc <__libc_init_array+0x40>)
 80006ce:	4c0c      	ldr	r4, [pc, #48]	; (8000700 <__libc_init_array+0x44>)
 80006d0:	f000 f818 	bl	8000704 <_init>
 80006d4:	1ba4      	subs	r4, r4, r6
 80006d6:	10a4      	asrs	r4, r4, #2
 80006d8:	2500      	movs	r5, #0
 80006da:	42a5      	cmp	r5, r4
 80006dc:	d105      	bne.n	80006ea <__libc_init_array+0x2e>
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006e4:	4798      	blx	r3
 80006e6:	3501      	adds	r5, #1
 80006e8:	e7ee      	b.n	80006c8 <__libc_init_array+0xc>
 80006ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ee:	4798      	blx	r3
 80006f0:	3501      	adds	r5, #1
 80006f2:	e7f2      	b.n	80006da <__libc_init_array+0x1e>
 80006f4:	0800071c 	.word	0x0800071c
 80006f8:	0800071c 	.word	0x0800071c
 80006fc:	0800071c 	.word	0x0800071c
 8000700:	08000720 	.word	0x08000720

08000704 <_init>:
 8000704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000706:	bf00      	nop
 8000708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070a:	bc08      	pop	{r3}
 800070c:	469e      	mov	lr, r3
 800070e:	4770      	bx	lr

08000710 <_fini>:
 8000710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000712:	bf00      	nop
 8000714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000716:	bc08      	pop	{r3}
 8000718:	469e      	mov	lr, r3
 800071a:	4770      	bx	lr
