
Labo2_SMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000928  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ad4  08000ad4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000ad4  08000ad4  00010ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ad8  08000ad8  00010ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08000adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          00000030  20000008  20000008  00020008  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20000038  20000038  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   000026c5  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000009b4  00000000  00000000  000226fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001e8  00000000  00000000  000230b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  000232a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000109f  00000000  00000000  00023400  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000bfb  00000000  00000000  0002449f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002509a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000004f8  00000000  00000000  00025118  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00025610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000008 	.word	0x20000008
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000abc 	.word	0x08000abc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	08000abc 	.word	0x08000abc

080001ec <GPIO_Config>:


// mode : 0 = input, 1 = output, 2 = alternate, 3 = analog
// pupd : 0 = no pull, 1 = pull-up, 2 = pull-down
// speed : 0 = low speed, 1 = medium speed, 2 : high speed, 3 : very high speed
void GPIO_Config(GPIO_TypeDef *GPIOx, uint8_t pin, uint8_t mode, uint8_t pupd, uint8_t speed) {
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	4608      	mov	r0, r1
 80001f6:	4611      	mov	r1, r2
 80001f8:	461a      	mov	r2, r3
 80001fa:	4603      	mov	r3, r0
 80001fc:	70fb      	strb	r3, [r7, #3]
 80001fe:	460b      	mov	r3, r1
 8000200:	70bb      	strb	r3, [r7, #2]
 8000202:	4613      	mov	r3, r2
 8000204:	707b      	strb	r3, [r7, #1]
    // Activer l'horloge du port concernÃ© (RCC->AHB1ENR)
    if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a55      	ldr	r2, [pc, #340]	; (8000360 <GPIO_Config+0x174>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GPIO_Config+0x30>
 800020e:	4a55      	ldr	r2, [pc, #340]	; (8000364 <GPIO_Config+0x178>)
 8000210:	4b54      	ldr	r3, [pc, #336]	; (8000364 <GPIO_Config+0x178>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6313      	str	r3, [r2, #48]	; 0x30
 800021a:	e056      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a52      	ldr	r2, [pc, #328]	; (8000368 <GPIO_Config+0x17c>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <GPIO_Config+0x46>
 8000224:	4a4f      	ldr	r2, [pc, #316]	; (8000364 <GPIO_Config+0x178>)
 8000226:	4b4f      	ldr	r3, [pc, #316]	; (8000364 <GPIO_Config+0x178>)
 8000228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022a:	f043 0302 	orr.w	r3, r3, #2
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
 8000230:	e04b      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a4d      	ldr	r2, [pc, #308]	; (800036c <GPIO_Config+0x180>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_Config+0x5c>
 800023a:	4a4a      	ldr	r2, [pc, #296]	; (8000364 <GPIO_Config+0x178>)
 800023c:	4b49      	ldr	r3, [pc, #292]	; (8000364 <GPIO_Config+0x178>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000240:	f043 0304 	orr.w	r3, r3, #4
 8000244:	6313      	str	r3, [r2, #48]	; 0x30
 8000246:	e040      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a49      	ldr	r2, [pc, #292]	; (8000370 <GPIO_Config+0x184>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIO_Config+0x72>
 8000250:	4a44      	ldr	r2, [pc, #272]	; (8000364 <GPIO_Config+0x178>)
 8000252:	4b44      	ldr	r3, [pc, #272]	; (8000364 <GPIO_Config+0x178>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6313      	str	r3, [r2, #48]	; 0x30
 800025c:	e035      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a44      	ldr	r2, [pc, #272]	; (8000374 <GPIO_Config+0x188>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIO_Config+0x88>
 8000266:	4a3f      	ldr	r2, [pc, #252]	; (8000364 <GPIO_Config+0x178>)
 8000268:	4b3e      	ldr	r3, [pc, #248]	; (8000364 <GPIO_Config+0x178>)
 800026a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026c:	f043 0310 	orr.w	r3, r3, #16
 8000270:	6313      	str	r3, [r2, #48]	; 0x30
 8000272:	e02a      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOF) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a40      	ldr	r2, [pc, #256]	; (8000378 <GPIO_Config+0x18c>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIO_Config+0x9e>
 800027c:	4a39      	ldr	r2, [pc, #228]	; (8000364 <GPIO_Config+0x178>)
 800027e:	4b39      	ldr	r3, [pc, #228]	; (8000364 <GPIO_Config+0x178>)
 8000280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
 8000288:	e01f      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOG) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a3b      	ldr	r2, [pc, #236]	; (800037c <GPIO_Config+0x190>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIO_Config+0xb4>
 8000292:	4a34      	ldr	r2, [pc, #208]	; (8000364 <GPIO_Config+0x178>)
 8000294:	4b33      	ldr	r3, [pc, #204]	; (8000364 <GPIO_Config+0x178>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029c:	6313      	str	r3, [r2, #48]	; 0x30
 800029e:	e014      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a37      	ldr	r2, [pc, #220]	; (8000380 <GPIO_Config+0x194>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIO_Config+0xca>
 80002a8:	4a2e      	ldr	r2, [pc, #184]	; (8000364 <GPIO_Config+0x178>)
 80002aa:	4b2e      	ldr	r3, [pc, #184]	; (8000364 <GPIO_Config+0x178>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
 80002b4:	e009      	b.n	80002ca <GPIO_Config+0xde>
    else if (GPIOx == GPIOI) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a32      	ldr	r2, [pc, #200]	; (8000384 <GPIO_Config+0x198>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d105      	bne.n	80002ca <GPIO_Config+0xde>
 80002be:	4a29      	ldr	r2, [pc, #164]	; (8000364 <GPIO_Config+0x178>)
 80002c0:	4b28      	ldr	r3, [pc, #160]	; (8000364 <GPIO_Config+0x178>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30

    // Configurer MODER
    GPIOx->MODER &= ~(0b11 << (pin * 2));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	78fa      	ldrb	r2, [r7, #3]
 80002d0:	0052      	lsls	r2, r2, #1
 80002d2:	2103      	movs	r1, #3
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	43d2      	mvns	r2, r2
 80002da:	401a      	ands	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |=  ((mode & 0b11) << (pin * 2));
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	78ba      	ldrb	r2, [r7, #2]
 80002e6:	f002 0103 	and.w	r1, r2, #3
 80002ea:	78fa      	ldrb	r2, [r7, #3]
 80002ec:	0052      	lsls	r2, r2, #1
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	431a      	orrs	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	601a      	str	r2, [r3, #0]

    // Configurer PUPDR
    GPIOx->PUPDR &= ~(0b11 << (pin * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	78fa      	ldrb	r2, [r7, #3]
 80002fe:	0052      	lsls	r2, r2, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f202 	lsl.w	r2, r1, r2
 8000306:	43d2      	mvns	r2, r2
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	60da      	str	r2, [r3, #12]
    GPIOx->PUPDR |=  ((pupd & 0b11) << (pin * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	787a      	ldrb	r2, [r7, #1]
 8000314:	f002 0103 	and.w	r1, r2, #3
 8000318:	78fa      	ldrb	r2, [r7, #3]
 800031a:	0052      	lsls	r2, r2, #1
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	60da      	str	r2, [r3, #12]

    // Configurer OSPEEDR
    GPIOx->OSPEEDR &= ~(0b11 << (pin * 2));
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	78fa      	ldrb	r2, [r7, #3]
 800032c:	0052      	lsls	r2, r2, #1
 800032e:	2103      	movs	r1, #3
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	43d2      	mvns	r2, r2
 8000336:	401a      	ands	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	609a      	str	r2, [r3, #8]
    GPIOx->OSPEEDR |=  ((speed & 0b11) << (pin * 2));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	7c3a      	ldrb	r2, [r7, #16]
 8000342:	f002 0103 	and.w	r1, r2, #3
 8000346:	78fa      	ldrb	r2, [r7, #3]
 8000348:	0052      	lsls	r2, r2, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	431a      	orrs	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	609a      	str	r2, [r3, #8]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40020000 	.word	0x40020000
 8000364:	40023800 	.word	0x40023800
 8000368:	40020400 	.word	0x40020400
 800036c:	40020800 	.word	0x40020800
 8000370:	40020c00 	.word	0x40020c00
 8000374:	40021000 	.word	0x40021000
 8000378:	40021400 	.word	0x40021400
 800037c:	40021800 	.word	0x40021800
 8000380:	40021c00 	.word	0x40021c00
 8000384:	40022000 	.word	0x40022000

08000388 <GPIO_readPIN>:

uint8_t GPIO_readPIN(GPIO_TypeDef *GPIOx, uint8_t pin) {
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]
	return ((GPIOx->IDR & (1 << pin)) ? 1 : 0);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	78fa      	ldrb	r2, [r7, #3]
 800039a:	2101      	movs	r1, #1
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	4013      	ands	r3, r2
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	bf14      	ite	ne
 80003a6:	2301      	movne	r3, #1
 80003a8:	2300      	moveq	r3, #0
 80003aa:	b2db      	uxtb	r3, r3
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <ADC_Config>:
 * Pas de DMA 12 bits aligné à droite
 * Mode conversion simple (Single conversion)
 * La conversion débute par logiciel (Software)
 * Linterruption EOC doit être activée
 */
void ADC_Config(ADC_TypeDef * ADCx, uint8_t channel){
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]

	// Activer horloge ADC correspondante
	if (ADCx == ADC1) RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a2d      	ldr	r2, [pc, #180]	; (800047c <ADC_Config+0xc4>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <ADC_Config+0x22>
 80003cc:	4a2c      	ldr	r2, [pc, #176]	; (8000480 <ADC_Config+0xc8>)
 80003ce:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <ADC_Config+0xc8>)
 80003d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d6:	6453      	str	r3, [r2, #68]	; 0x44
 80003d8:	e014      	b.n	8000404 <ADC_Config+0x4c>
	else if (ADCx == ADC2) RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a29      	ldr	r2, [pc, #164]	; (8000484 <ADC_Config+0xcc>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <ADC_Config+0x38>
 80003e2:	4a27      	ldr	r2, [pc, #156]	; (8000480 <ADC_Config+0xc8>)
 80003e4:	4b26      	ldr	r3, [pc, #152]	; (8000480 <ADC_Config+0xc8>)
 80003e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ec:	6453      	str	r3, [r2, #68]	; 0x44
 80003ee:	e009      	b.n	8000404 <ADC_Config+0x4c>
	else if (ADCx == ADC3) RCC->APB2ENR |= RCC_APB2ENR_ADC3EN;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a25      	ldr	r2, [pc, #148]	; (8000488 <ADC_Config+0xd0>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d105      	bne.n	8000404 <ADC_Config+0x4c>
 80003f8:	4a21      	ldr	r2, [pc, #132]	; (8000480 <ADC_Config+0xc8>)
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <ADC_Config+0xc8>)
 80003fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000402:	6453      	str	r3, [r2, #68]	; 0x44

	// Configuration de base
	ADCx->CR1 = 0;  // reset CR1
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
	ADCx->CR2 = 0;  // reset CR2
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
	ADCx->SQR1 = 0; // 1 conversion
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2200      	movs	r2, #0
 8000414:	62da      	str	r2, [r3, #44]	; 0x2c

	// Conversion 12 bits
	ADCx->CR1 &= ~BIT25;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	605a      	str	r2, [r3, #4]
	ADCx->CR1 &= ~BIT24;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	605a      	str	r2, [r3, #4]

	// Activer interruptions EOC
	ADCx->CR1 |= BIT5;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f043 0220 	orr.w	r2, r3, #32
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	605a      	str	r2, [r3, #4]

	// Alignement a droite
	ADCx->CR2 &= ~BIT11;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	609a      	str	r2, [r3, #8]

	// Single conversion mode
	ADCx->CR2 &= ~BIT1;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	f023 0202 	bic.w	r2, r3, #2
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	609a      	str	r2, [r3, #8]

	// Sélectionner le canal (5 bits max sur SQ1)
	ADCx->SQR3 = channel & 0x1F;
 8000452:	78fb      	ldrb	r3, [r7, #3]
 8000454:	f003 021f 	and.w	r2, r3, #31
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	635a      	str	r2, [r3, #52]	; 0x34

	// Enable ADC
	ADCx->CR2 |= BIT0;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	f043 0201 	orr.w	r2, r3, #1
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	609a      	str	r2, [r3, #8]

	// Activer NVIC
	NVIC->ISER[0] = BIT18;
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <ADC_Config+0xd4>)
 800046a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800046e:	601a      	str	r2, [r3, #0]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40012000 	.word	0x40012000
 8000480:	40023800 	.word	0x40023800
 8000484:	40012100 	.word	0x40012100
 8000488:	40012200 	.word	0x40012200
 800048c:	e000e100 	.word	0xe000e100

08000490 <ADC_StartConvert>:

void ADC_StartConvert(ADC_TypeDef * ADCx){
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
    // Lancer conversion
    ADCx->CR2 |= BIT30;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	609a      	str	r2, [r3, #8]
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <ADC_IsReady>:

uint8_t ADC_IsReady(void){
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
    return adc_ready;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <ADC_IsReady+0x14>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b2db      	uxtb	r3, r3
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	20000028 	.word	0x20000028

080004c8 <ADC_GetSample>:

uint32_t ADC_GetSample(ADC_TypeDef * ADCx){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	// Attendre une interruption
	adc_ready = 0;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <ADC_GetSample+0x20>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	return adc_sample;
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <ADC_GetSample+0x24>)
 80004d8:	681b      	ldr	r3, [r3, #0]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000028 	.word	0x20000028
 80004ec:	20000024 	.word	0x20000024

080004f0 <ADC_IRQHandler>:

void ADC_IRQHandler(void) {
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
    if (ADC1->SR & ADC_SR_EOC) {       // EOC = End Of Conversion flag
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <ADC_IRQHandler+0x28>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d006      	beq.n	800050e <ADC_IRQHandler+0x1e>
        adc_sample = ADC1->DR;         // Lecture du DR efface le flag EOC
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <ADC_IRQHandler+0x28>)
 8000502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <ADC_IRQHandler+0x2c>)
 8000506:	6013      	str	r3, [r2, #0]
        adc_ready = 1;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <ADC_IRQHandler+0x30>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
    }
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40012000 	.word	0x40012000
 800051c:	20000024 	.word	0x20000024
 8000520:	20000028 	.word	0x20000028

08000524 <map_adc_to_duty>:

// Valeur ADC max (12 bits)
#define ADC_MAX      4095U

// Map 0-4095 vers 0-100
static uint8_t map_adc_to_duty(uint32_t adc_value) {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    if (adc_value >= ADC_MAX) return 100;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000532:	4293      	cmp	r3, r2
 8000534:	d901      	bls.n	800053a <map_adc_to_duty+0x16>
 8000536:	2364      	movs	r3, #100	; 0x64
 8000538:	e00b      	b.n	8000552 <map_adc_to_duty+0x2e>
    /* multiplication avant division pour meilleure prÃ©cision */
    return (uint8_t)((adc_value * 100U) / ADC_MAX);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2264      	movs	r2, #100	; 0x64
 800053e:	fb02 f203 	mul.w	r2, r2, r3
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <map_adc_to_duty+0x3c>)
 8000544:	fba3 1302 	umull	r1, r3, r3, r2
 8000548:	1ad2      	subs	r2, r2, r3
 800054a:	0852      	lsrs	r2, r2, #1
 800054c:	4413      	add	r3, r2
 800054e:	0adb      	lsrs	r3, r3, #11
 8000550:	b2db      	uxtb	r3, r3
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	00100101 	.word	0x00100101

08000564 <ControleurLED_Init>:

void ControleurLED_Init(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af02      	add	r7, sp, #8
    // 1) Initialise le SysTick pour pouvoir utiliser delai() si nÃ©cessaire
    SysTick_Init(9000);
 800056a:	f242 3028 	movw	r0, #9000	; 0x2328
 800056e:	f04f 0100 	mov.w	r1, #0
 8000572:	f000 f84b 	bl	800060c <SysTick_Init>

    /* 2) Configurer la broche du potentiomÃ¨tre en mode analogique (PC3) */
    GPIO_Config(ADC_PIN_PORT, ADC_PIN, 3, 0 , 0);
 8000576:	2300      	movs	r3, #0
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2203      	movs	r2, #3
 800057e:	2103      	movs	r1, #3
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <ControleurLED_Init+0x4c>)
 8000582:	f7ff fe33 	bl	80001ec <GPIO_Config>

    /* 3) Configurer l'ADC (ADC1, channel correspondant Ã  PC3) */
    ADC_Config(ADC_INSTANCE, ADC_CHANNEL);
 8000586:	210d      	movs	r1, #13
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <ControleurLED_Init+0x50>)
 800058a:	f7ff ff15 	bl	80003b8 <ADC_Config>

    /* 4) Initialiser le PWM (met PA5 en AF, TIM2, etc.) */
    PWM_Init();
 800058e:	f000 f8b9 	bl	8000704 <PWM_Init>

    // 5) Configurer le bouton en entrée avec pull-down (on suppose bouton actif haut)
    GPIO_Config(BTN_PORT, BTN_PIN, 0 /* input */, 0 /* pull-down */, 0 /* speed */);
 8000592:	2300      	movs	r3, #0
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <ControleurLED_Init+0x54>)
 800059e:	f7ff fe25 	bl	80001ec <GPIO_Config>

    // Par défaut, éteindre la LED (duty = 0)
    PWM_SetDutyCycle(0);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f93c 	bl	8000820 <PWM_SetDutyCycle>
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020800 	.word	0x40020800
 80005b4:	40012000 	.word	0x40012000
 80005b8:	40020000 	.word	0x40020000

080005bc <ControleurLED_Off>:
    /* On ne 'dÃ©marre' pas le timer ici (PWM_Init l'a dÃ©jÃ ), on rÃ¨gle le duty */
    /* Par dÃ©faut on met 100% (plein) ; typiquement on utilisera SetIntensityFromADC */
    PWM_SetDutyCycle(100);
}

void ControleurLED_Off(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    PWM_SetDutyCycle(0);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 f92d 	bl	8000820 <PWM_SetDutyCycle>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <ControleurLED_UpdateFromADCAndApply>:

void ControleurLED_UpdateFromADCAndApply(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
    /* Demande une conversion puis attend l'Ã©chantillon et applique */
    ADC_StartConvert(ADC_INSTANCE);
 80005d2:	480d      	ldr	r0, [pc, #52]	; (8000608 <ControleurLED_UpdateFromADCAndApply+0x3c>)
 80005d4:	f7ff ff5c 	bl	8000490 <ADC_StartConvert>

    /* attendre que l'ADC signale que l'Ã©chantillon est prÃªt (blocking) */
    while (!ADC_IsReady()) {
 80005d8:	bf00      	nop
 80005da:	f7ff ff69 	bl	80004b0 <ADC_IsReady>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0fa      	beq.n	80005da <ControleurLED_UpdateFromADCAndApply+0xe>
    }

    uint32_t sample = ADC_GetSample(ADC_INSTANCE);
 80005e4:	4808      	ldr	r0, [pc, #32]	; (8000608 <ControleurLED_UpdateFromADCAndApply+0x3c>)
 80005e6:	f7ff ff6f 	bl	80004c8 <ADC_GetSample>
 80005ea:	6078      	str	r0, [r7, #4]
    uint8_t duty = map_adc_to_duty(sample);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ff99 	bl	8000524 <map_adc_to_duty>
 80005f2:	4603      	mov	r3, r0
 80005f4:	70fb      	strb	r3, [r7, #3]
    PWM_SetDutyCycle(duty);
 80005f6:	78fb      	ldrb	r3, [r7, #3]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f911 	bl	8000820 <PWM_SetDutyCycle>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40012000 	.word	0x40012000

0800060c <SysTick_Init>:
/*
 * RVR (LOAD) : nombre a partir du lequel la clock decremente (9000=1ms)
 * CVR (VAL) : Current value du compteur
 * CSR (CTRL) : Active interruptions TICKINT, et Enable
*/
void SysTick_Init(uint64_t load_value){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	e9c7 0100 	strd	r0, r1, [r7]
	SysTick->LOAD |= load_value;
 8000616:	490e      	ldr	r1, [pc, #56]	; (8000650 <SysTick_Init+0x44>)
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <SysTick_Init+0x44>)
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4313      	orrs	r3, r2
 8000620:	604b      	str	r3, [r1, #4]

	SysTick->VAL |= 0;
 8000622:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <SysTick_Init+0x44>)
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <SysTick_Init+0x44>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	6093      	str	r3, [r2, #8]

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800062a:	4a09      	ldr	r2, [pc, #36]	; (8000650 <SysTick_Init+0x44>)
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SysTick_Init+0x44>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000636:	4a06      	ldr	r2, [pc, #24]	; (8000650 <SysTick_Init+0x44>)
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SysTick_Init+0x44>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000e010 	.word	0xe000e010

08000654 <millis>:

uint64_t millis(){
 8000654:	b490      	push	{r4, r7}
 8000656:	af00      	add	r7, sp, #0
	return millis_count;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <millis+0x14>)
 800065a:	cb18      	ldmia	r3, {r3, r4}
}
 800065c:	4618      	mov	r0, r3
 800065e:	4621      	mov	r1, r4
 8000660:	46bd      	mov	sp, r7
 8000662:	bc90      	pop	{r4, r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000030 	.word	0x20000030

0800066c <delai>:

void delai(uint64_t wait_millis){
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t millis_target = millis() + wait_millis;
 8000676:	f7ff ffed 	bl	8000654 <millis>
 800067a:	460a      	mov	r2, r1
 800067c:	4601      	mov	r1, r0
 800067e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000682:	185b      	adds	r3, r3, r1
 8000684:	eb44 0402 	adc.w	r4, r4, r2
 8000688:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(millis() < millis_target);
 800068c:	bf00      	nop
 800068e:	f7ff ffe1 	bl	8000654 <millis>
 8000692:	460a      	mov	r2, r1
 8000694:	4601      	mov	r1, r0
 8000696:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800069a:	42a2      	cmp	r2, r4
 800069c:	bf08      	it	eq
 800069e:	4299      	cmpeq	r1, r3
 80006a0:	d3f5      	bcc.n	800068e <delai+0x22>
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd90      	pop	{r4, r7, pc}
	...

080006ac <SysTick_Handler>:

void SysTick_Handler(void){
 80006ac:	b490      	push	{r4, r7}
 80006ae:	af00      	add	r7, sp, #0
	millis_count = millis_count + 1;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <SysTick_Handler+0x1c>)
 80006b2:	cb18      	ldmia	r3, {r3, r4}
 80006b4:	3301      	adds	r3, #1
 80006b6:	f144 0400 	adc.w	r4, r4, #0
 80006ba:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <SysTick_Handler+0x1c>)
 80006bc:	e882 0018 	stmia.w	r2, {r3, r4}
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc90      	pop	{r4, r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000030 	.word	0x20000030

080006cc <main>:
**===========================================================================
*/
volatile uint64_t millis_count = 0;

int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	    PWM_SetDutyCycle(88);

	#endif

	#ifdef P3
	ControleurLED_Init();
 80006d2:	f7ff ff47 	bl	8000564 <ControleurLED_Init>
	    /* Boucle principale :
	       - Si bouton pressé -> lire ADC -> appliquer intensité
	       - Si relacher -> éteindre LED
	       - Échantillonnage 10 Hz*/
	    while (1) {
	        uint8_t btn_state = GPIO_readPIN(GPIOA, 0);
 80006d6:	2100      	movs	r1, #0
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <main+0x34>)
 80006da:	f7ff fe55 	bl	8000388 <GPIO_readPIN>
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]

	        if (btn_state) {
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <main+0x22>
	            // bouton appuyé, lire ADC et appliquer intensité
	            ControleurLED_UpdateFromADCAndApply();
 80006e8:	f7ff ff70 	bl	80005cc <ControleurLED_UpdateFromADCAndApply>
 80006ec:	e001      	b.n	80006f2 <main+0x26>
	        } else {
	            // bouton relaché, éteindre LED
	            ControleurLED_Off();
 80006ee:	f7ff ff65 	bl	80005bc <ControleurLED_Off>
	        }

	        delai(100); /* 100 ms => 10 Hz */
 80006f2:	f04f 0064 	mov.w	r0, #100	; 0x64
 80006f6:	f04f 0100 	mov.w	r1, #0
 80006fa:	f7ff ffb7 	bl	800066c <delai>
	    while (1) {
 80006fe:	e7ea      	b.n	80006d6 <main+0xa>
 8000700:	40020000 	.word	0x40020000

08000704 <PWM_Init>:

// Sauvegarde des valeurs courantes
static uint32_t current_freq = 1000;   // par dÃ©faut 1 kHz
static uint8_t current_duty = 50;      // par dÃ©faut 50%

void PWM_Init(void) {
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
    // 1. Activer clock du GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000708:	4a3f      	ldr	r2, [pc, #252]	; (8000808 <PWM_Init+0x104>)
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <PWM_Init+0x104>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6313      	str	r3, [r2, #48]	; 0x30

    // 2. Mettre PA5 en mode Alternate Function (AF1 = TIM2_CH1)
    GPIOA->MODER &= ~(0x3 << (5 * 2));
 8000714:	4a3d      	ldr	r2, [pc, #244]	; (800080c <PWM_Init+0x108>)
 8000716:	4b3d      	ldr	r3, [pc, #244]	; (800080c <PWM_Init+0x108>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800071e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0x2 << (5 * 2));   // Alternate Function
 8000720:	4a3a      	ldr	r2, [pc, #232]	; (800080c <PWM_Init+0x108>)
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <PWM_Init+0x108>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800072a:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~(0xF << (5 * 4));
 800072c:	4a37      	ldr	r2, [pc, #220]	; (800080c <PWM_Init+0x108>)
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <PWM_Init+0x108>)
 8000730:	6a1b      	ldr	r3, [r3, #32]
 8000732:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000736:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0x1 << (5 * 4));  // AF1 = TIM2_CH1
 8000738:	4a34      	ldr	r2, [pc, #208]	; (800080c <PWM_Init+0x108>)
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <PWM_Init+0x108>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000742:	6213      	str	r3, [r2, #32]

    // 3. Activer la clock de TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000744:	4a30      	ldr	r2, [pc, #192]	; (8000808 <PWM_Init+0x104>)
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <PWM_Init+0x104>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	6413      	str	r3, [r2, #64]	; 0x40

    // 4. Configurer le Timer2 pour PWM
    TIM2->PSC = (SYS_CLOCK_FREQ / (current_freq * 1000)) - 1; // prescaler
 8000750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000754:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <PWM_Init+0x10c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800075c:	fb01 f303 	mul.w	r3, r1, r3
 8000760:	492c      	ldr	r1, [pc, #176]	; (8000814 <PWM_Init+0x110>)
 8000762:	fbb1 f3f3 	udiv	r3, r1, r3
 8000766:	b29b      	uxth	r3, r3
 8000768:	3b01      	subs	r3, #1
 800076a:	b29b      	uxth	r3, r3
 800076c:	8513      	strh	r3, [r2, #40]	; 0x28
    TIM2->ARR = 1000 - 1;    // Periode fixer a 1000 pas (resolution duty cycle 0-1000)
 800076e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000772:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c

    // 5. Configurer le canal 1 en mode PWM1
    TIM2->CCMR1 &= ~TIM_CCMR1_OC1M;
 8000778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000780:	8b1b      	ldrh	r3, [r3, #24]
 8000782:	b29b      	uxth	r3, r3
 8000784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000788:	b29b      	uxth	r3, r3
 800078a:	8313      	strh	r3, [r2, #24]
    TIM2->CCMR1 |= (0x6 << 4);			  // PWM mode 1
 800078c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000794:	8b1b      	ldrh	r3, [r3, #24]
 8000796:	b29b      	uxth	r3, r3
 8000798:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800079c:	b29b      	uxth	r3, r3
 800079e:	8313      	strh	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE;              // Preload enable
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007a8:	8b1b      	ldrh	r3, [r3, #24]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	8313      	strh	r3, [r2, #24]

    TIM2->CCER |= TIM_CCER_CC1E;   // Activer sortie canal 1
 80007b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007bc:	8c1b      	ldrh	r3, [r3, #32]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	8413      	strh	r3, [r2, #32]

    // 6. Mettre un duty cycle par defaut
    TIM2->CCR1 = (current_duty * (TIM2->ARR + 1)) / 100;
 80007c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <PWM_Init+0x114>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d8:	3301      	adds	r3, #1
 80007da:	fb03 f301 	mul.w	r3, r3, r1
 80007de:	490f      	ldr	r1, [pc, #60]	; (800081c <PWM_Init+0x118>)
 80007e0:	fba1 1303 	umull	r1, r3, r1, r3
 80007e4:	095b      	lsrs	r3, r3, #5
 80007e6:	6353      	str	r3, [r2, #52]	; 0x34

    // 7. Activer le compteur
    TIM2->CR1 |= TIM_CR1_CEN;
 80007e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	8013      	strh	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000
 8000810:	20000000 	.word	0x20000000
 8000814:	044aa200 	.word	0x044aa200
 8000818:	20000004 	.word	0x20000004
 800081c:	51eb851f 	.word	0x51eb851f

08000820 <PWM_SetDutyCycle>:

void PWM_SetDutyCycle(uint8_t duty) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
    if (duty > 100) duty = 100;   // clamp 0â100%
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b64      	cmp	r3, #100	; 0x64
 800082e:	d901      	bls.n	8000834 <PWM_SetDutyCycle+0x14>
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	71fb      	strb	r3, [r7, #7]
    current_duty = duty;
 8000834:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <PWM_SetDutyCycle+0x44>)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	7013      	strb	r3, [r2, #0]
    TIM2->CCR1 = (duty * (TIM2->ARR + 1)) / 100;
 800083a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000844:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000846:	3201      	adds	r2, #1
 8000848:	fb02 f303 	mul.w	r3, r2, r3
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <PWM_SetDutyCycle+0x48>)
 800084e:	fba2 2303 	umull	r2, r3, r2, r3
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	634b      	str	r3, [r1, #52]	; 0x34
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000004 	.word	0x20000004
 8000868:	51eb851f 	.word	0x51eb851f

0800086c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800086c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a4 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000870:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000872:	e003      	b.n	800087c <LoopCopyDataInit>

08000874 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000876:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000878:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800087a:	3104      	adds	r1, #4

0800087c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000880:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000882:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000884:	d3f6      	bcc.n	8000874 <CopyDataInit>
  ldr  r2, =_sbss
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000888:	e002      	b.n	8000890 <LoopFillZerobss>

0800088a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800088a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800088c:	f842 3b04 	str.w	r3, [r2], #4

08000890 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000894:	d3f9      	bcc.n	800088a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000896:	f000 f83b 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089a:	f000 f8eb 	bl	8000a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089e:	f7ff ff15 	bl	80006cc <main>
  bx  lr    
 80008a2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80008a8:	08000adc 	.word	0x08000adc
  ldr  r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008b0:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80008b4:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80008b8:	20000038 	.word	0x20000038

080008bc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <CAN1_RX0_IRQHandler>

080008be <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <HardFault_Handler+0x4>

080008d2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <BusFault_Handler+0x4>

080008de <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4a16      	ldr	r2, [pc, #88]	; (8000970 <SystemInit+0x60>)
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <SystemInit+0x60>)
 8000918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <SystemInit+0x64>)
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <SystemInit+0x64>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <SystemInit+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <SystemInit+0x64>)
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <SystemInit+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000944:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <SystemInit+0x64>)
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <SystemInit+0x68>)
 800094a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <SystemInit+0x64>)
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <SystemInit+0x64>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000956:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800095e:	f000 f80d 	bl	800097c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000962:	4b03      	ldr	r3, [pc, #12]	; (8000970 <SystemInit+0x60>)
 8000964:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000968:	609a      	str	r2, [r3, #8]
#endif
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00
 8000974:	40023800 	.word	0x40023800
 8000978:	24003010 	.word	0x24003010

0800097c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800098a:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <SetSysClock+0xe8>)
 800098c:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <SetSysClock+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000994:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <SetSysClock+0xe8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3301      	adds	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d103      	bne.n	80009b4 <SetSysClock+0x38>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80009b2:	d1f0      	bne.n	8000996 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <SetSysClock+0xe8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80009c0:	2301      	movs	r3, #1
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	e001      	b.n	80009ca <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d142      	bne.n	8000a56 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80009d0:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <SetSysClock+0xe8>)
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <SetSysClock+0xe8>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80009dc:	4a22      	ldr	r2, [pc, #136]	; (8000a68 <SetSysClock+0xec>)
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <SetSysClock+0xec>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80009e8:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <SetSysClock+0xe8>)
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <SetSysClock+0xe8>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80009f0:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <SetSysClock+0xe8>)
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <SetSysClock+0xe8>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <SetSysClock+0xe8>)
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <SetSysClock+0xe8>)
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000a06:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <SetSysClock+0xe8>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <SetSysClock+0xf0>)
 8000a0c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a0e:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <SetSysClock+0xe8>)
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <SetSysClock+0xe8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a18:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a1a:	bf00      	nop
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <SetSysClock+0xe8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f9      	beq.n	8000a1c <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <SetSysClock+0xf4>)
 8000a2a:	f240 7205 	movw	r2, #1797	; 0x705
 8000a2e:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <SetSysClock+0xe8>)
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <SetSysClock+0xe8>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	f023 0303 	bic.w	r3, r3, #3
 8000a3a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <SetSysClock+0xe8>)
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <SetSysClock+0xe8>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000a48:	bf00      	nop
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SetSysClock+0xe8>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	f003 030c 	and.w	r3, r3, #12
 8000a52:	2b08      	cmp	r3, #8
 8000a54:	d1f9      	bne.n	8000a4a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40007000 	.word	0x40007000
 8000a6c:	03401204 	.word	0x03401204
 8000a70:	40023c00 	.word	0x40023c00

08000a74 <__libc_init_array>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	4e0d      	ldr	r6, [pc, #52]	; (8000aac <__libc_init_array+0x38>)
 8000a78:	4c0d      	ldr	r4, [pc, #52]	; (8000ab0 <__libc_init_array+0x3c>)
 8000a7a:	1ba4      	subs	r4, r4, r6
 8000a7c:	10a4      	asrs	r4, r4, #2
 8000a7e:	2500      	movs	r5, #0
 8000a80:	42a5      	cmp	r5, r4
 8000a82:	d109      	bne.n	8000a98 <__libc_init_array+0x24>
 8000a84:	4e0b      	ldr	r6, [pc, #44]	; (8000ab4 <__libc_init_array+0x40>)
 8000a86:	4c0c      	ldr	r4, [pc, #48]	; (8000ab8 <__libc_init_array+0x44>)
 8000a88:	f000 f818 	bl	8000abc <_init>
 8000a8c:	1ba4      	subs	r4, r4, r6
 8000a8e:	10a4      	asrs	r4, r4, #2
 8000a90:	2500      	movs	r5, #0
 8000a92:	42a5      	cmp	r5, r4
 8000a94:	d105      	bne.n	8000aa2 <__libc_init_array+0x2e>
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a9c:	4798      	blx	r3
 8000a9e:	3501      	adds	r5, #1
 8000aa0:	e7ee      	b.n	8000a80 <__libc_init_array+0xc>
 8000aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aa6:	4798      	blx	r3
 8000aa8:	3501      	adds	r5, #1
 8000aaa:	e7f2      	b.n	8000a92 <__libc_init_array+0x1e>
 8000aac:	08000ad4 	.word	0x08000ad4
 8000ab0:	08000ad4 	.word	0x08000ad4
 8000ab4:	08000ad4 	.word	0x08000ad4
 8000ab8:	08000ad8 	.word	0x08000ad8

08000abc <_init>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	bf00      	nop
 8000ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac2:	bc08      	pop	{r3}
 8000ac4:	469e      	mov	lr, r3
 8000ac6:	4770      	bx	lr

08000ac8 <_fini>:
 8000ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aca:	bf00      	nop
 8000acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ace:	bc08      	pop	{r3}
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	4770      	bx	lr
